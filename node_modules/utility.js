var moment = require('moment');
var linq = require('linq.js');

function cal_culate_consumption(ecu_speed, ecu_fule_liteper_minuite, callback) {
if (ecu_fule_liteper_minuite > 0) {
    //debugger;
    var a = ((ecu_fule_liteper_minuite * 60) / 1000);

    ecu_speed = ecu_speed == 500 ? 0 : ecu_speed;

    var consumption = (ecu_speed / a);
    callback(consumption);
    return;
}

}

function cal_Angle(px1, py1, px2, py2, callback) {
//debugger
// Negate X and Y values
var pxRes = px2 - px1;
var pyRes = py2 - py1;
var angle = 0.0;
// Calculate the angle
if (pxRes == 0.0) {
    if (pxRes == 0.0) {
        angle = 0.0;
    } else if (pyRes > 0.0) {
        angle = Math.PI / 2.0;
    } else {
        angle = Math.PI * 3.0 / 2.0;
    }
}
else if (pyRes == 0.0) {
    if (pxRes > 0.0) {
        angle = 0.0;
    }
    else {
        angle = Math.PI;

    }
}
else {
    if (pxRes < 0.0) {
        angle = Math.atan(pyRes / pxRes) + Math.PI;
    }
    else if (pyRes < 0.0) {
        angle = Math.atan(pyRes / pxRes) + (2 * Math.PI);
    }
    else {
        angle = Math.atan(pyRes / pxRes);
    }

}
// Convert to degrees
angle = angle * 180 / Math.PI;
angle = angle.toFixed(0);
// angle = getdirection(angle);
callback(angle);
return;
}


function cal_getdirection(number, callback) {
//debugger;
number = parseInt(number, 10);
var res = 0;
switch (true) {
    case (number >= 0 && number <= 11): res = 0; break;
    case (number >= 12 && number <= 34): res = 23; break; // 22.5
    case (number >= 35 && number <= 56): res = 45; break;
    case (number >= 57 && number <= 79): res = 68; break;
    case (number >= 80 && number <= 101): res = 90; break;
    case (number >= 102 && number <= 124): res = 113; break;
    case (number >= 125 && number <= 146): res = 135; break;
    case (number >= 147 && number <= 169): res = 158; break;
    case (number >= 170 && number <= 191): res = 180; break;
    case (number >= 192 && number <= 214): res = 203; break;
    case (number >= 215 && number <= 236): res = 225; break;
    case (number >= 237 && number <= 259): res = 248; break;
    case (number >= 260 && number <= 281): res = 270; break;
    case (number >= 282 && number <= 304): res = 293; break;
    case (number >= 305 && number <= 326): res = 315; break;
    case (number >= 327 && number <= 349): res = 338; break;
    default: res = 0; break;

}
callback(res);
return;
}


function format_date(now) {
//debugger;
now = now != '' ? now : now = new Date();
year = "" + now.getFullYear();

month = "" + (now.getMonth() + 1); if (month.length == 1) { month = "0" + month; }
day = "" + now.getDate(); if (day.length == 1) { day = "0" + day; }
hour = "" + now.getHours(); if (hour.length == 1) { hour = "0" + hour; }
minute = "" + now.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
second = "" + now.getSeconds(); if (second.length == 1) { second = "0" + second; }
result = year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second;

return result;
}

var get_now = {
n: format_date(''),
//now: function () { return this.n; }
now: function () { return moment().format('YYYY-MM-DD HH:mm:ss.SSS'); }
};


function now() {
return get_now.now();
}


var get_now_to_device = {
n: format_date(''),
//now: function () { return this.n; }
now: function () { return moment().utc().format('YY/MM/DD,HH:mm:ss'); }
};


function now_to_device() {
return get_now_to_device.now();
}

function tcp_chk_header(raw_data,msconf, callback) {

var irow = { "serial_sim": ' ', 'raw_data': ' ', "sharp": ' ','tail':' ' };
//debugger;
if (Contains(raw_data, "#")) {

    if (StartsWith(raw_data, "#E")) {
        serial_sim = raw_data.split(':')[3];
        irow.serial_sim = serial_sim;
        irow.raw_data = raw_data;
    }
    else if (StartsWith(raw_data, "#O")) {
        serial_sim = Mid(raw_data, 12, 9);//"015762391";//
        irow.serial_sim = serial_sim;
        irow.raw_data = raw_data;
        irow.sharp = "O";
    }
    else  //#N and other
    {
        serial_sim = raw_data.split(':')[1];
        irow.serial_sim = serial_sim;
        irow.raw_data = raw_data;
    }


    if (irow.sharp != 'O') {
        debugger
        irow.tail = "://:" + msconf.blackbox_id + ":" +Trim(msconf.sim) + ":/" + msconf.db_name;
    }
    else {
        irow.tail = "/" + msconf.db_name;
    }
    

    callback(irow);
    return;
}
}


function subs_serialsim(serial_sim) {
return serial_sim.substring(2, serial_sim.length - 1);
}
exports.subs_serialsim = subs_serialsim;

//http://rickyrosario.com/blog/javascript-startswith-and-endswith-implementation-for-strings/
function StartsWith(str, prefix) {
return str.indexOf(prefix) === 0;
}

function EndsWith(str, suffix) {
return str.match(suffix + "$") == suffix;
}

//http://stackoverflow.com/questions/1789945/method-like-string-contains-in-javascript
function Contains(data, it)
{
    if (data != null) {
        return data.indexOf(it) != -1;
    } else {
        return data;
    }

};

//http://blog.loftdigital.com/blog/trim-a-string-in-javascript
function Trim(str) {
    if (typeof str != "undefined") {
        var trimmed = str.replace(/^\s+|\s+$/g, '');
        return trimmed;
    }
}

//http://www.4guysfromrolla.com/webtech/code/Mid.shtml
function Mid(str, start, len)

/***
        IN: str - the string we are LEFTing
            start - our string's starting position (0 based!!)
            len - how many characters from start we want to get

        RETVAL: The substring from start to start+len
***/ {
// Make sure start and len are within proper bounds
start = start - 1; //for collect follow Bom
if (start < 0 || len < 0) return "";

var iEnd, iLen = String(str).length;
if (start + len > iLen)
    iEnd = iLen;
else
    iEnd = start + len;

return String(str).substring(start, iEnd);
}

exports.insert = function (index, insert, str) {
    if (index > 0)
        return str.substring(0, index) + insert + str.substring(index, str.length);
    else
        return insert + str;
}



function upsert_template(sql_insrt, sql_update, callback) {
    var arr_1 = []; var s1;
    arr_1 = sql_insrt.split('VALUES')
    debugger
    s1 = Trim(arr_1[1]);
    arr_1[1] = s1.substring(1, s1.length - 1);
    sql_insrt = arr_1[0] + " SELECT " + arr_1[1];

    var sql = " WITH upsert AS (" + sql_update + "  RETURNING *)";
    sql += " " + sql_insrt + " ";
    sql += " WHERE NOT EXISTS (SELECT * FROM upsert)";

    callback(sql);
    return;
}
exports.upsert_template = upsert_template;


function iConcat(ar,xar,cb) {
    if (ar.length == 0) {
        ar.push(xar);
        cb(ar);
        return
    } else {
        var c = ar[0].concat(xar);
        ar[0] = c;
        cb(ar);
        return
    }
}


function isnot_future_time(limit_hr, time_device,callback) {
//  debugger;
var time_server_now = now()
var xi = datediff(time_server_now, time_device);
var timediff = parseInt(xi["total_hour"]);

var res = true;
if (timediff >= limit_hr)
{
    res = false;
}

callback(res);
return;
}

function set_dbdata_to_device(msg)
{
    if (msg != null && msg != '') {
        var msg = msg.substring(1, msg.length - 1);
        msg = msg.split(',');
        var nbuf = new Buffer(msg);
        return nbuf;
    } else {
        return null;
    }

}

function iDateDiff(start_time,end_time,format_time) {
    var startDate = moment(start_time, 'YYYY-M-DD HH:mm:ss')
    var endDate = moment(end_time, 'YYYY-M-DD HH:mm:ss')
    var Diff = endDate.diff(startDate, format_time)
    return Diff;
}

var timespan = require('timespan');

function datediff(start_date, end_date)
{
    var _start_date = new Date(start_date);
    var _end_date = new Date(end_date);

    var ts = timespan.fromDates(_start_date, _end_date);
    var total_ms =  ts.totalMilliseconds().toFixed(2);
    var total_sec = ts.totalSeconds().toFixed(2);
    var total_min = ts.totalMinutes().toFixed(2);
    var total_hour = ts.totalHours()
    var total_days = ts.totalDays()

    var res = { 'total_ms': total_ms, 'total_sec': total_sec, 'total_min': total_min, 'total_hour': total_hour, 'total_days': total_days };
    return res;
}

//http://snipplr.com/view/16591/
exports.Left = function(str, n) {
    if (n <= 0)
        return "";
    else if (n > String(str).length)
        return str;
    else
        return String(str).substring(0, n);
}

exports.Right = function(str, n) {
    if (n <= 0)
        return "";
    else if (n > String(str).length)
        return str;
    else {
        var iLen = String(str).length;
        return String(str).substring(iLen, iLen - n);
    }
}

function padding_left(s, c, n) {
    if (!s || !c || s.length >= n) {
        return s;
    }
    
    var max = (n - s.length) / c.length;
    for (var i = 0; i < max; i++) {
        s = c + s;
    }
    
    return s;
}
exports.padding_left = padding_left;

// right padding s with c to a total of n chars
function padding_right(s, c, n) {
    if (!s || !c || s.length >= n) {
        return s;
    }
    
    var max = (n - s.length) / c.length;
    for (var i = 0; i < max; i++) {
        s += c;
    }
    
    return s;
}
exports.padding_right = padding_right;

exports.Val = function(data) {
    return parseInt(data, 10);
}

//http://www.4guysfromrolla.com/webtech/code/Mid.shtml
exports.Mid = function(str, start, len)

    /***
         IN: str - the string we are LEFTing
                start - our string's starting position (0 based!!)
                len - how many characters from start we want to get

            RETVAL: The substring from start to start+len
    ***/ {
    // Make sure start and len are within proper bounds
    start = start - 1; //for collect follow Bom
    if (start < 0 || len < 0) return "";

    var iEnd, iLen = String(str).length;
    if (start + len > iLen)
        iEnd = iLen;
    else
        iEnd = start + len;

    return String(str).substring(start, iEnd);
}

//http://royaltutorials.com/javascript-parsedouble/
exports.parseDouble = function(value) {
    if (typeof value == "string") {
        value = value.match(/^-?\d*/)[0];
    }

    return !isNaN(parseInt(value)) ? value * 1 : NaN;
}


//http://jalaj.net/blog/2012/09/13/hex-to-from-ascii-in-javascript/
//alert(asc2hex('How are you?'));
//alert(hex2asc('4920616d2066696e6521'));

exports.asc2hex = function(pStr) {
    tempstr = '';
    for (a = 0; a < pStr.length; a = a + 1) {
        tempstr = tempstr + pStr.charCodeAt(a).toString(16);
    }
    return tempstr;
}

exports.hex2asc = function(pStr) {
    tempstr = '';
    for (b = 0; b < pStr.length; b = b + 2) {
        tempstr = tempstr + String.fromCharCode(parseInt(pStr.substr(b, 2), 16));
    }
    return tempstr;
}

function iRmend(s) {
    var s = s.substring(0, s.length - 1);
    debugger
    return Trim(s);
}
exports.iRmend = iRmend;

/*
public string[] split_lng(string a, string length)
{
    string[] iar = System.Text.RegularExpressions.Regex.Split(a, "(?<=\\G.{" + length + "})");
return iar;
}*/

function is_undefined(v,callback){
    if (typeof v === 'undefined') {
        callback(true);
        return;
    } else {
        callback(false);
        return;
    }
}
exports.is_undefined = is_undefined;

function isnull(s, val) {
    val = s === null ? val : s;
    return val;
}
exports.isnull = isnull;

function isempty(s,val) {
    if (s == '') {
        return val;
    } else {
        return s;
    }
}
exports.isempty = isempty;

function isNumber(value) {
    if ((undefined === value) || (null === value)) {
        return false;
    }
    if (typeof value == 'number') {
        return true;
    }
    return !isNaN(value - 0);
}
exports.isNumber = isNumber;


/*
I borrowed that regex from http://www.codetoad.com/javascript/isnumeric.asp. Explanation:

/^ match beginning of string
-{0,1} optional negative sign
\d* optional digits
\.{0,1} optional decimal point
\d+ at least one digit
$/ match end of string
*/

function IsNumeric(input) {
    var RE = /^-{0,1}\d*\.{0,1}\d+$/;
    return (RE.test(input));
}

exports.IsNumeric = IsNumeric;


exports.QLat = function (hexlon) {
    
    this.xlon1 = this.Left(hexlon, 2);
    this.xlon2 = this.Right(hexlon, 5);
    this.result = hex2dec(xlon1) + "." + hex2dec(xlon2);
    return result;
}

exports.QLon = function(hexlon) {
    this.xlon1 = this.Right(hexlon, 2);
    this.xlon2 = this.Left(hexlon, 5);
    this.result = hex2dec(xlon1) + "." + hex2dec(xlon2);//String.format("{0:0.00000}",);
    return result;
}

exports.OLat = function(hexlat) {
    this.xlat1 = this.Left(hexlat, 2);
    this.xlat2 = this.Right(hexlat, 4);
    this.result = parseDouble(hex2dec(xlon1)) + parseDouble(hex2dec(xlon2)) / 60000;//String.format("{0:0.00000}",);
    return result;
}

exports.OLon = function(hexlon) {
    this.xlon1 = this.Left(hexlon, 4);
    this.xlon2 = this.Right(hexlon, 4);
    this.result = parseDouble(hex2dec(xlon1)) + parseDouble(hex2dec(xlon2)) / 60000;//String.format("{0:0.00000}",);
    return result;
}

exports.QIO = function(io2bit, io8bit) {
    io2bit + hex2bin(io8bit);
}

exports.Q10Bit2Long = function(q2bit, q8bit) {
    this.t = q2bit + hex2bin(q8bit);
    return t = this.bin2dec(t);
}

exports.QValue = function(status, a) {
    this.value = "";
    if (status == "32" || status == "34") {

    } else {
        value = hex2dec(a);
    }
    return value;
}

exports.BCD_to_TwoBit=function(hex_in, PosBit) {
    this.Temp_msb;
    this.Temp_lsb;
    this.Temp_sum;

    Temp_msb = this.hex2bin(this.Left(hex_in, 1));
    Temp_lsb = this.hex2bin(this.Right(hex_in, 1));
    Temp_sum = Temp_msb + Temp_lsb;
    this.BCD = '';
    switch (PosBit) {
        case 1: { BCD = this.bin2dec(this.Mid(Temp_sum, 1, 2)); } break;
        case 2: { BCD = this.bin2dec(this.Mid(Temp_sum, 3, 2)); } break;
        case 3: { BCD = this.bin2dec(this.Mid(Temp_sum, 5, 2)); } break;
        default: { BCD = this.bin2dec(this.Mid(Temp_sum, 7, 2)); } break;
    }
    return BCD;
}

exports.Sformat = function () {
    // The string containing the format items (e.g. "{0}")
    // will and always has to be the first argument.
    var theString = arguments[0];

    // start with the second argument (i = 1)
    for (var i = 1; i < arguments.length; i++) {
        // "gm" = RegEx options for Global search (more than one instance)
        // and for Multiline search
        var regEx = new RegExp("\\{" + (i - 1) + "\\}", "gm");
        theString = theString.replace(regEx, arguments[i]);
    }

    return theString;
}


//http://rickyrosario.com/blog/javascript-startswith-and-endswith-implementation-for-strings/
exports.StartsWith = function(str, prefix) {
    return str.indexOf(prefix) === 0;
}

exports.EndsWith = function(str, suffix) {
    return str.match(suffix + "$") == suffix;
}

//http://stackoverflow.com/questions/1789945/method-like-string-contains-in-javascript
exports.Contains = function(data,it) {
        return data.indexOf(it) != -1;
};


exports.FormatNumber = function(num, prefix) {
    prefix = prefix || '';
    num += '';
    var splitStr = num.split('.');
    var splitLeft = splitStr[0];
    var splitRight = splitStr.length > 1 ? '.' + splitStr[1] : '';
    var regx = /(\d+)(\d{3})/;
    while (regx.test(splitLeft)) {
        splitLeft = splitLeft.replace(regx, '$1' + ',' + '$2');
    }
    return prefix + splitLeft + splitRight;
}

exports.FormatNumbers= function(num, digit) {
    return num.toFixed(digit);
}

exports.unformatNumber = function(num) {
    return num.replace(/([^0-9\.\-])/g, '') * 1;
}


var convertBase = function (num) {
    this.from = function (baseFrom) {
        this.to = function (baseTo) {
            return parseInt(num, baseFrom).toString(baseTo);
        };
        return this;
    };
    return this;
};

// binary to decimal
exports.bin2dec = function (num) {
    return convertBase(num).from(2).to(10);
};

// binary to hexadecimal
exports.bin2hex = function (num) {
    return zeroPad(convertBase(num).from(2).to(16), 4);
};

// decimal to binary
exports.dec2bin = function (num) {
    return convertBase(num).from(10).to(2);
};

// decimal to hexadecimal
exports.dec2hex = function (num) {
    return convertBase(num).from(10).to(16);
};

// hexadecimal to binary
exports.hex2bin = function (num) {
    return zeroPad(convertBase(num).from(16).to(2).toString(), 12);
};

// hexadecimal to decimal
exports.hex2dec = function (num) {
    return convertBase(num).from(16).to(10);
};

function zeroPad(num, places) {
    if (num != null) {
        var zero = places - num.toString().length + 1;
        return Array(+(zero > 0 && zero)).join("0") + num;
    }

}
exports.zeroPad = zeroPad;

//http://www.tylerfrankenstein.com/user/4/code/javascript-date-time-yyyy-mm-dd-hh-mm-ss
exports.format_date = function (now) {
    //debugger;
    now = now != '' ? now :  now = new Date();
    year = "" + now.getFullYear();

    month = "" + (now.getMonth() + 1); if (month.length == 1) { month = "0" + month; }
    day = "" + now.getDate(); if (day.length == 1) { day = "0" + day; }
    hour = "" + now.getHours(); if (hour.length == 1) { hour = "0" + hour; }
    minute = "" + now.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
    second = "" + now.getSeconds(); if (second.length == 1) { second = "0" + second; }
    result = year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second;

    return result;
}

exports.format_date_only = function (now) {
    //debugger;
    now = now != '' ? now : now = new Date();
    year = "" + now.getFullYear();

    month = "" + (now.getMonth() + 1); if (month.length == 1) { month = "0" + month; }
    day = "" + now.getDate(); if (day.length == 1) { day = "0" + day; }
    hour = "" + now.getHours(); if (hour.length == 1) { hour = "0" + hour; }
    minute = "" + now.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
    second = "" + now.getSeconds(); if (second.length == 1) { second = "0" + second; }
    result = year + "-" + month + "-" + day ;

    return result;
}

function replaceAll (find, replace, str) {
    return str.replace(new RegExp(find, 'g'), replace);
}
exports.replaceAll = replaceAll;

exports.diff = function (date1, date2, parts)
{
    var d1 = new Date(date1.getTime()),
        d2 = new Date(date2.getTime()),
        pm = d1 <= d2 ? 1 : -1,
        result = {},
        factors = { weeks: (1000 * 60 * 60 * 24 * 7), days: (1000 * 60 * 60 * 24), hours: (1000 * 60 * 60), minutes: (1000 * 60), seconds: 1000, milliseconds: 1 };

    if (parts === undefined)
        parts = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds', 'milliseconds'];
    else if (typeof (parts) == "string")
        parts = [parts];

    for (var i = 0, l = parts.length; i < l; i++) {
        var k = parts[i];
        result[k] = 0;

        if (factors[k] === undefined) {
            inaWhile: while (true) {
                d2.adjust(k, -1 * pm);
                if ((pm === 1 && d1 > d2) || (pm === -1 && d1 < d2)) {
                    d2.adjust(k, 1 * pm);
                    break inaWhile;
                }
                result[k]++;
            }
        }
        else {
            var tmpDiff = Math.abs(d2.getTime() - d1.getTime());
            result[k] = Math.floor(tmpDiff / factors[k]);
            d2.adjust(k, result[k] * -1 * pm);
        }
        result[k] *= pm;
    }

    if (parts.length == 1)
        return result[parts[0]];
    return result;
}
//http://trentrichardson.com/2011/09/27/better-javascript-date-add-and-diff/

//+++++++++++++++++ PostGresql ++++++++++++++++++

exports.sqote = function (s) {
    return "'" + s + "'";
}


function fixed(num)
{
    //debugger;
    num = roundTo2Decimals(num);
    return num;//num.toString().toFixed(2);
}
exports.fixed = fixed;

function roundTo2Decimals(numberToRound) {
    return Math.round(numberToRound * 100) / 100
}


exports.fn_formate_date_iso = function (d1) {
    var s = d1.split(' ');
    var dd = exports.replaceAll(':', '-', s[1].toString());
    var str = s[0] + '-' + dd;


    // var str =s.replace(' ', '-').replace(':', '-');

    var p = str.split("-");
    var date = new Date(p[0], p[1], p[2], p[3], p[4], p[5]);
    return date;
}

function format_time(dt) {
    var res = moment(dt).format("YYYY-MM-DD HH:mm:ss");
    return res;
}
exports.format_time = format_time;

function format_times(dt) {
    var res = moment(dt).format("YYYY-MM-DD HH:mm:ss.SSS");
    return res;
}
exports.format_times = format_times;

function format_date(dt) {
    var res = moment(dt).format("YYYY-MM-DD");
    return res;
}
exports.format_date = format_date;


function iformat_date(dt,format) {
    var res = moment(dt).format(format);
    return res;
}
exports.iformat_date = iformat_date;

function format_timeunix_tonormal(dateStr) {
// var dateStr = "20141204090200";
    var match = dateStr.match(/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/);
    var s = match[1] + '-' + match[2] + '-' + match[3] + ' ' + match[4] + ':' + match[5];
    //console.log(s);
    return s;
}
exports.format_timeunix_tonormal = format_timeunix_tonormal;


//http://stackoverflow.com/questions/8098202/javascript-detecting-valid-dates
function is_valid_date(dateString)
{
    //console.log(dateString+" "+id);

    //debugger;
    /*if (exports.StartsWith(dateString, 'NaN') || exports.EndsWith(dateString,'NaN')) {
        return false;
    } else {
        var m = moment(dateString);
        return m.isValid();
    }
*/
    var date = Date.parse(dateString);
// var xx = type(date);
    if (isNaN(date)) {
        return false;
    }



    var comp = dateString.split('-');

    if (comp.length !== 3) {
        return false;
    }

    var y = parseInt(comp[0], 10);
    var m = parseInt(comp[1], 10);
    var d = parseInt(comp[2], 10);

    var date = new Date(y, m - 1, d);

    var m = moment(date);
    return m.isValid();

}
exports.is_valid_date = is_valid_date;

function islat_lng(lat,lng)
{
var b = false;

    if (lng.length <= 10 && lat.length <= 10)
    {
        var dlng = parseFloat(lng);//double.Parse(lng);
        var dlat = parseFloat(lat);//double.Parse(lat);

        try
        {
            if (dlng <= -180 || dlng <= 180 && dlat > 0.0 || dlng > 0.0)
            {
                if (dlat <= -90 || dlat <= 90)
                {
                    b = true;
                }
            }
        }
        catch(e)
        {
            
            b = false;
        }
    }

return b;
}
exports.islat_lng = islat_lng;

function type(o) {
    return !!o && Object.prototype.toString.call(o).match(/(\w+)\]/)[1];
}



function Split(data, spliter) {
    return data.split(spliter);
}
exports.Split = Split;


function array2str(json_ar, spliter, key_or_val) {
    var select = key_or_val == "key" ? "$.Key" : "$.Value";
    var val=' ';
if (json_ar != 0) {
        val = linq.Enumerable.From(json_ar)
        .Select(select)
        .ToString(spliter);
        return val;
    } else {
        return val;
    }

}
exports.array2str = array2str;

function remove_u0000(data) {
    data = replaceAll('\u0000', '0', data);
    return data;
}
exports.remove_u0000 = remove_u0000;


/**
 * Split a string into chunks of the given size
* @param  {String} string is the String to split
* @param  {Number} size is the size you of the cuts
* @return {Array} an Array with the strings
*/
function splitString(string, size) {
    var re = new RegExp('.{1,' + size + '}', 'g');
    return string.match(re);
}


function subhours(d1, hr, mi) {
    var d = new Date(d1)
    var ires = d.subTime(hr, mi);//moment_format_time(d.setHours(d.getHours() + hr));    //debugger;
    return ires;
}

function addhours(d1, hr, mi) {
    var d = new Date(d1)
    var ires = d.addTimes(hr, mi);//moment_format_time(d.setHours(d.getHours() + hr));    //debugger;
    //console.log("ires = "  + moment(ires).format("YYYY-MM-DD HH:mm:ss"));

    return ires;
}


Date.prototype.subTime = function (h, m) {
    this.setHours(this.getHours() - h);
    this.setMinutes(this.getMinutes() - m);
    return this;
}

Date.prototype.addTimes = function (h, m) {
    this.setHours(this.getHours() + h);
    this.setMinutes(this.getMinutes() + m);
    return this;
}

exports.subhours = subhours;
exports.addhours = addhours;
exports.splitString = splitString;
exports.datediff = datediff;
exports.set_dbdata_to_device = set_dbdata_to_device;
exports.EndsWith = EndsWith;
exports.StartsWith = StartsWith;
exports.Contains = Contains;
exports.Trim = Trim;
exports.Mid = Mid;
exports.tcp_chk_header = tcp_chk_header;
exports.now_to_device = now_to_device;
exports.now = now;
exports.cal_getdirection = cal_getdirection
exports.cal_Angle = cal_Angle;
exports.cal_culate_consumption = cal_culate_consumption;
exports.iConcat = iConcat;
exports.isnot_future_time = isnot_future_time;
exports.iDateDiff = iDateDiff;

function test_future() {
    var t = '2016-07-08 22:31:41.000';
    isnot_future_time(12,t)
}
