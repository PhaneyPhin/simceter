var moment = require('moment');
var iddif = require('./iDatediff.js');



function cal_culate_consumption(ecu_speed, ecu_fule_liteper_minuite, callback) {
    if (ecu_fule_liteper_minuite > 0) {
        //debugger;
        var a = ((ecu_fule_liteper_minuite * 60) / 1000);

        ecu_speed = ecu_speed == 500 ? 0 : ecu_speed;

        var consumption = (ecu_speed / a);
        callback(consumption);
        return;
    }

}


function cal_Angle(px1, py1, px2, py2, callback) {
    //debugger
    // Negate X and Y values
    var pxRes = px2 - px1;
    var pyRes = py2 - py1;
    var angle = 0.0;
    // Calculate the angle
    if (pxRes == 0.0) {
        if (pxRes == 0.0) {
            angle = 0.0;
        } else if (pyRes > 0.0) {
            angle = Math.PI / 2.0;
        } else {
            angle = Math.PI * 3.0 / 2.0;
        }
    }
    else if (pyRes == 0.0) {
        if (pxRes > 0.0) {
            angle = 0.0;
        }
        else {
            angle = Math.PI;

        }
    }
    else {
        if (pxRes < 0.0) {
            angle = Math.atan(pyRes / pxRes) + Math.PI;
        }
        else if (pyRes < 0.0) {
            angle = Math.atan(pyRes / pxRes) + (2 * Math.PI);
        }
        else {
            angle = Math.atan(pyRes / pxRes);
        }

    }
    // Convert to degrees
    angle = angle * 180 / Math.PI;
    angle = angle.toFixed(0);
    // angle = getdirection(angle);
    callback(angle);
    return;
}


function cal_getdirection(number, callback) {
    //debugger;
    number = parseInt(number, 10);
    var res = 0;
    switch (true) {
        case (number >= 0 && number <= 11): res = 0; break;
        case (number >= 12 && number <= 34): res = 23; break; // 22.5
        case (number >= 35 && number <= 56): res = 45; break;
        case (number >= 57 && number <= 79): res = 68; break;
        case (number >= 80 && number <= 101): res = 90; break;
        case (number >= 102 && number <= 124): res = 113; break;
        case (number >= 125 && number <= 146): res = 135; break;
        case (number >= 147 && number <= 169): res = 158; break;
        case (number >= 170 && number <= 191): res = 180; break;
        case (number >= 192 && number <= 214): res = 203; break;
        case (number >= 215 && number <= 236): res = 225; break;
        case (number >= 237 && number <= 259): res = 248; break;
        case (number >= 260 && number <= 281): res = 270; break;
        case (number >= 282 && number <= 304): res = 293; break;
        case (number >= 305 && number <= 326): res = 315; break;
        case (number >= 327 && number <= 349): res = 338; break;
        default: res = 0; break;

    }
    callback(res);
    return;
}


 function format_date(now) {
    //debugger;
    now = now != '' ? now : now = new Date();
    year = "" + now.getFullYear();

    month = "" + (now.getMonth() + 1); if (month.length == 1) { month = "0" + month; }
    day = "" + now.getDate(); if (day.length == 1) { day = "0" + day; }
    hour = "" + now.getHours(); if (hour.length == 1) { hour = "0" + hour; }
    minute = "" + now.getMinutes(); if (minute.length == 1) { minute = "0" + minute; }
    second = "" + now.getSeconds(); if (second.length == 1) { second = "0" + second; }
    result = year + "-" + month + "-" + day + " " + hour + ":" + minute + ":" + second;

    return result;
}

var get_now = {
    n: format_date(''),
    //now: function () { return this.n; }
    now: function () { return moment().format('YYYY-MM-DD HH:mm:ss.SSS'); }
};

var get_timenow = {
    n: format_date(''),
    //now: function () { return this.n; }
    now: function () { return moment().format('HHmmssSSS'); }
};

function timenow() {
   return get_timenow.now();
}

function now() {
   return get_now.now();
}

function tcp_chk_header(raw_data,msconf, callback) {

    var irow = { "serial_sim": ' ', 'raw_data': ' ', "sharp": ' ','tail':' ' };
    //debugger;
    if (Contains(raw_data, "#")) {

        if (StartsWith(raw_data, "#E")) {
            serial_sim = raw_data.split(':')[3];
            irow.serial_sim = serial_sim;
            irow.raw_data = raw_data;
        }
        else if (StartsWith(raw_data, "#O")) {
            serial_sim = Mid(raw_data, 12, 9);//"015762391";//
            irow.serial_sim = serial_sim;
            irow.raw_data = raw_data;
            irow.sharp = "O";
        }
        else  //#N and other
        {
            serial_sim = raw_data.split(':')[1];
            irow.serial_sim = serial_sim;
            irow.raw_data = raw_data;
        }


        if (irow.sharp != 'O') {
            irow.tail = "://:" + msconf.blackbox_id + ":" +Trim(msconf.sim) + ":/" + msconf.db_name;
        }
        else {
            irow.tail = "/" + msconf.db_name;
        }
      

        callback(irow);
        return;
    }
}


function subs_serialsim(serial_sim) {
    return serial_sim.substring(2, serial_sim.length - 1);
}
exports.subs_serialsim = subs_serialsim;

//http://rickyrosario.com/blog/javascript-startswith-and-endswith-implementation-for-strings/
 function StartsWith(str, prefix) {
    return str.indexOf(prefix) === 0;
}

  function EndsWith(str, suffix) {
    return str.match(suffix + "$") == suffix;
}

//http://stackoverflow.com/questions/1789945/method-like-string-contains-in-javascript
  function Contains(data, it)
  {
      if (data != null) {
          return data.indexOf(it) != -1;
      } else {
          return data;
      }
   
};

//http://blog.loftdigital.com/blog/trim-a-string-in-javascript
 function Trim(str) {
     if (typeof str != "undefined") {
         var trimmed = str.replace(/^\s+|\s+$/g, '');
         return trimmed;
     }
}

//http://www.4guysfromrolla.com/webtech/code/Mid.shtml
 function Mid(str, start, len)

    /***
            IN: str - the string we are LEFTing
                start - our string's starting position (0 based!!)
                len - how many characters from start we want to get

            RETVAL: The substring from start to start+len
    ***/ {
    // Make sure start and len are within proper bounds
    start = start - 1; //for collect follow Bom
    if (start < 0 || len < 0) return "";

    var iEnd, iLen = String(str).length;
    if (start + len > iLen)
        iEnd = iLen;
    else
        iEnd = start + len;

    return String(str).substring(start, iEnd);
 }

 exports.insert = function (index, insert, str) {
     if (index > 0)
         return str.substring(0, index) + insert + str.substring(index, str.length);
     else
         return insert + str;
 }



 function upsert_template(sql_insrt, sql_update, callback) {
     var arr_1 = []; var s1;
     arr_1 = sql_insrt.split('VALUES')
     s1 = Trim(arr_1[1]);
     arr_1[1] = s1.substring(1, s1.length - 1);
     sql_insrt = arr_1[0] + " SELECT " + arr_1[1];

     var sql = " WITH upsert AS (" + sql_update + "  RETURNING *)";
     sql += " " + sql_insrt + " ";
     sql += " WHERE NOT EXISTS (SELECT * FROM upsert)";

     callback(sql);
     return;
 }
 exports.upsert_template = upsert_template;


 function iConcat(ar,xar,cb) {
     if (ar.length == 0) {
         ar.push(xar);
         cb(ar);
         return
     } else {
         var c = ar[0].concat(xar);
         ar[0] = c;
         cb(ar);
         return
     }
 }


 function isnot_future_time(limit_hr, time_device) {
     //debugger;
     var time_server_now = now()
     var xi = iddif.datediff(time_server_now, time_device);
     var timediff = parseInt(xi["total_hour"]);
     var res = true;
     if (timediff >= limit_hr) {
         res = false;
     }
     return res;
     // console.log(res);
 }

 function set_dbdata_to_device(msg)
 {
     if (msg != null && msg != '') {
         var msg = msg.substring(1, msg.length - 1);
         msg = msg.split(',');
         var nbuf = new Buffer(msg);
         return nbuf;
     } else {
         return null;
     }

 }

 function iDateDiff(start_time,end_time,format_time) {
     var startDate = moment(start_time, 'YYYY-M-DD HH:mm:ss')
     var endDate = moment(end_time, 'YYYY-M-DD HH:mm:ss')
     var Diff = endDate.diff(startDate, format_time)
     return Diff;
 }


 exports.set_dbdata_to_device = set_dbdata_to_device;

 exports.EndsWith = EndsWith;
 exports.StartsWith = StartsWith;
 exports.Contains = Contains;
 exports.Trim = Trim;
 exports.Mid = Mid;
 exports.tcp_chk_header = tcp_chk_header;

 exports.timenow = timenow;
 exports.now = now;
 exports.cal_getdirection = cal_getdirection
 exports.cal_Angle = cal_Angle;
 exports.cal_culate_consumption = cal_culate_consumption;

 exports.iConcat = iConcat;
 exports.isnot_future_time = isnot_future_time;
 exports.iDateDiff = iDateDiff;
 //exports.StringBuilder = StringBuilder;